version: "3.8"

services:
  backend:
    build: backend
    ports:
      - "8080:8080"
    networks:
      - integration
    depends_on:
      - db
    environment:
      - POSTGRES_DB=integration_db
      - DB_URL=db
      - DATA_STEAM_PATH=/app/data/SteamModified.csv
      - DATA_TWITCH_PATH=/app/data/Twitch_game_data.csv
      # set to true to initialize data from csv files
      # if database already has data prevent adding redundant data by setting to false
      - LOAD_DATA=false
  db:
    image: postgres
    restart: always
    volumes:
      - data:/var/lib/postgresql/data
    networks:
      - integration
    environment:
      - POSTGRES_DB=integration_db
      - POSTGRES_USER=integration
      - POSTGRES_PASSWORD=integration
    expose:
      - 5432
#  pgadmin:
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
#      PGADMIN_DEFAULT_PASSWORD: password
#      PGADMIN_LISTEN_PORT: 80
#    ports:
#      - "15432:80"
#    volumes:
#      - pgadmin:/var/lib/pgadmin
#    depends_on:
#      - db
#    networks:
#      integration:
#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    ports:
#      - "9090:9090"
#    restart: unless-stopped
#    volumes:
#      - ./prometheus:/etc/prometheus
#      - prom_data:/prometheus
#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    restart: unless-stopped
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=grafana
#    volumes:
#      - ./grafana:/etc/grafana/provisioning/datasources
  frontend:
    build:
      context: frontend/frontend
      # target: development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend/frontend/src:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - web
    depends_on:
      - backend
volumes:
  data:
  pgadmin:
  prom_data:
networks:
  integration:
  web: